{
  "x-generator": "NSwag v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v9.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "My Title",
    "description": "Generated at last start from 08.05.2022 16:30:58",
    "version": "1.0.0"
  },
  "host": "localhost:44309",
  "schemes": [
    "https"
  ],
  "produces": [
    "text/plain",
    "application/json",
    "text/json"
  ],
  "paths": {
    "/api/File/MergeFiles/{folder}/{resultFileName}": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Merge the given files and return result name.",
        "operationId": "File_MergeFiles",
        "consumes": [
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "folder",
            "in": "path",
            "required": true,
            "description": "folder of both files",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "resultFileName",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "name": "filesToMerge",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "xml": {
                "name": "ArrayOfstring",
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "string"
                }
              }
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "name of the result file, can be null",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/File/DeleteFile/{folder}/{fileName}": {
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete given file.",
        "operationId": "File_DeleteFile",
        "parameters": [
          {
            "type": "string",
            "name": "folder",
            "in": "path",
            "required": true,
            "description": "folder of file",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "path",
            "required": true,
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/File": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Return file",
        "operationId": "File_ReadFile",
        "parameters": [
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "folder of file",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "fileToRead",
            "in": "query",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/File/ReadFiles": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Return all files in a specific directory ordererd descending by name (newest first)",
        "operationId": "File_ReadFiles",
        "parameters": [
          {
            "type": "string",
            "name": "directory",
            "in": "query",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "array",
              "xml": {
                "name": "ArrayOfstring",
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "string"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/File/RenameFile/{folder}/{oldFileName}/{newFileName}": {
      "patch": {
        "tags": [
          "File"
        ],
        "summary": "Rename a file",
        "operationId": "File_RenameFile",
        "parameters": [
          {
            "type": "string",
            "name": "folder",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "oldFileName",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "newFileName",
            "in": "path",
            "required": true,
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/File/ReadFolders": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Return all folders",
        "operationId": "File_ReadFolders",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "array",
              "xml": {
                "name": "ArrayOfstring",
                "wrapped": true
              },
              "items": {
                "type": "string",
                "xml": {
                  "name": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/File/GetThumbnailOfFile/{folder}/{fileName}": {
      "get": {
        "tags": [
          "File"
        ],
        "operationId": "File_GetThumbnailOfFile",
        "parameters": [
          {
            "type": "string",
            "name": "folder",
            "in": "path",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "path",
            "required": true,
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Scan": {
      "post": {
        "tags": [
          "Scan"
        ],
        "summary": "Scan a file to the given folder and fileName",
        "operationId": "Scan_Scan",
        "parameters": [
          {
            "type": "string",
            "name": "folderName",
            "in": "query",
            "description": "folder to put result in",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "fileName",
            "in": "query",
            "description": "name the file should get",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "scanQuality",
            "in": "query",
            "description": "quality to scan with",
            "x-schema": {
              "$ref": "#/definitions/ScanQuality"
            },
            "x-nullable": false,
            "enum": [
              "Fast",
              "Normal",
              "Good",
              "Best"
            ]
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "filename of the resultfile (may changed if original name was taken) or null if scanning failed",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Status/UpdateAvailable": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Returns if the app with the requesting version is old or not. ",
        "operationId": "Status_UpdateAvailable",
        "parameters": [
          {
            "type": "string",
            "name": "versionString",
            "in": "query",
            "description": "current app version",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Status/GetUpdateFile": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Returns the newest version as apk file",
        "operationId": "Status_GetUpdateFile",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/Status/Ping": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Return true, used to see if server is reachable/running",
        "operationId": "Status_Ping",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ScanQuality": {
      "type": "string",
      "description": "Predefined scan quality options",
      "x-enumNames": [
        "Fast",
        "Normal",
        "Good",
        "Best"
      ],
      "enum": [
        "Fast",
        "Normal",
        "Good",
        "Best"
      ]
    }
  },
  "tags": [
    {
      "name": "File",
      "description": "Controller to hanlde FileActions like merging, deleting, showing,..."
    },
    {
      "name": "Scan",
      "description": "Controller to handle scan action and returning available quality options"
    },
    {
      "name": "Status",
      "description": "Controller to handle updates if an old version of an app asks for one"
    }
  ]
}